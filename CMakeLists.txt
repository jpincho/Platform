cmake_minimum_required (VERSION 3.10)

project ("Platform")

set ( CMAKE_C_STANDARD 11 )
set ( CMAKE_C_STANDARD_REQUIRED ON )

if (WIN32)
	set (PLATFORM_WINDOWS TRUE PARENT_SCOPE)
    set (PLATFORM_WINDOWS TRUE )
else()
	set (PLATFORM_LINUX TRUE PARENT_SCOPE)
    set (PLATFORM_LINUX TRUE )
endif()
if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    set (PLATFORM_COMPILER_CLANG TRUE PARENT_SCOPE)
    set (PLATFORM_COMPILER_CLANG TRUE )
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    set (PLATFORM_COMPILER_GNU TRUE PARENT_SCOPE)
    set (PLATFORM_COMPILER_GNU TRUE )
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    set (PLATFORM_COMPILER_MSVC TRUE PARENT_SCOPE)
    set (PLATFORM_COMPILER_MSVC TRUE )
endif()

include(CheckSymbolExists)
check_symbol_exists(strnlen "string.h" PLATFORM_STRNLEN_EXISTS)
check_symbol_exists(strndup "string.h" PLATFORM_STRNDUP_EXISTS)
check_symbol_exists(fnmatch "fnmatch.h" PLATFORM_FNMATCH_EXISTS)

cmake_host_system_information(RESULT RESULT QUERY HAS_MMX)
if(RESULT)
    set(PLATFORM_MMX_AVAILABLE TRUE)
endif()
cmake_host_system_information(RESULT RESULT QUERY HAS_MMX_PLUS)
if(RESULT)
    set(PLATFORM_MMX_PLUS_AVAILABLE TRUE)
endif()

cmake_host_system_information(RESULT RESULT QUERY HAS_SSE)
if(RESULT)
    set(PLATFORM_SSE_AVAILABLE TRUE)
endif()
cmake_host_system_information(RESULT RESULT QUERY HAS_SSE_FP)
if(RESULT)
    set(PLATFORM_SSE_FP_AVAILABLE TRUE)
endif()
cmake_host_system_information(RESULT RESULT QUERY HAS_SSE2)
if(RESULT)
    set(PLATFORM_SSE2_AVAILABLE TRUE)
endif()
cmake_host_system_information(RESULT RESULT QUERY HAS_SSE_MMX)
if(RESULT)
    set(PLATFORM_SSE_MMX_AVAILABLE TRUE)
endif()

cmake_host_system_information(RESULT RESULT QUERY HAS_AMD_3DNOW)
if(RESULT)
    set(PLATFORM_3DNOW_AVAILABLE TRUE)
endif()
cmake_host_system_information(RESULT RESULT QUERY HAS_AMD_3DNOW_PLUS)
if(RESULT)
    set(PLATFORM_3DNOW_PLUS_AVAILABLE TRUE)
endif()

configure_file ( Platform.h.in "${CMAKE_CURRENT_LIST_DIR}/Platform.h" )

file ( GLOB PLATFORM_SOURCES "*.c" "*.h" Platform.h.in Platform.h )
if(PLATFORM_STRNLEN_EXISTS)
    list(REMOVE_ITEM PLATFORM_SOURCES "strnlen.c" )
else()
    message(STATUS "${PROJECT_NAME} - Using custom strnlen")
endif()
if(PLATFORM_STRNDUP_EXISTS)
    list(REMOVE_ITEM PLATFORM_SOURCES "strndup.c")
else()
    message(STATUS "${PROJECT_NAME} - Using custom strndup")
endif()
if(PLATFORM_FNMATCH_EXISTS)
    list(REMOVE_ITEM PLATFORM_SOURCES "fnmatch.c" "fnmatch.h")
else()
    message(STATUS "${PROJECT_NAME} - Using custom fnmatch")
endif()
add_library ( Platform ${PLATFORM_SOURCES} )
target_include_directories(Platform PUBLIC ${CMAKE_CURRENT_LIST_DIR})
